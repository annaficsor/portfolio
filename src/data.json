[{
    "name": "Rome Map",
    "descript": "Code + UI Design",
    "thumb": {
      "first": "./assets/rome_thumb.png",
      "second": "./assets/rome_thumb@2x.png",
      "third":"./assets/rome_thumb@3x.png"
    },
    "desktop": {
      "first": "./assets/rome_desktop.png",
      "second": "./assets/rome_desktop@2x.png",
      "third":"./assets/rome_desktop@3x.png"
    },
    "phone": {
      "first": "./assets/rome_phone.png",
      "second": "./assets/rome_phone@2x.png",
      "third":"./assets/rome_phone@3x.png"
    },
    "linkname": "romemap",
    "github": "https://github.com/annaficsor/rome-map-udacity",
    "site": "https://annaficsor.github.io/rome-map-udacity/",
    "color": "#FEC076",
    "heading": ["Role: UI Designer, Front-End Web Developer", "Client: Udacity Scholarship Project", "Date: July 2018"],
    "project": "Project",
    "projectbody": "Develop a single page application (with React) featuring a map (Google Maps API) of my neighborhood or a neighborhood I would like to visit. Add functionality to this map including highlighted locations, third-party data about those and various ways to browse the content. Display at least 5 locations that I'm interested in and these should display by default when the pages loaded. No starter code provided by Udacity.",
    "tasks": "Tasks",
    "tasksbody": ["Find a neighbourhood and locations that I’d like to display",
    "Make a clean, responsive, user-friendly and accessible design", "Write code required to add a full-screen map to the page using the Google Maps API. For sake of efficiency, the map API should be called only once", "Write code required to display map markers identifying the selected locations. The app should display those locations by default when the page is loaded", "Implement a list view of the set of locations", "Provide a filter option to filter both the list view and the map markers displayed by default on load. The list view and the markers should update accordingly in real time", "Add functionality using third-party APIs to provide information when a map marker or list view entry is clicked", "Selecting a location via list item or map marker should cause the map marker to bounce or in some other way animate to indicate that the location has been selected and associated info window should open above the map marker with additional information",
    "Asynchronous API Requests with error handling",
    "Fetch the additional data from third-party API",
    "Focus management (a11y)", "Semantically defined site elements, or using ARIA roles", "Accessible images", "Service worker", "Proper use of React"],
    "solution": "Solution",
    "solutionbody": ["Rome is one of my bucket list place that I would like to visit, so I decided to explore this city. I made a little research and asked a few friends of mine about what kind of locations would they visit. No surprise: people love relaxing during their holiday, eat good local food, drink coffee, and explore attractions. Based on this, I decided to collect four types of locations: attractions, coffee, restaurants, and parks.", "Finally, I fetched data from three third-party APIs (Google Map, Yelp, Wikipedia) to get relevant additional data about the locations that I wanted to show the users. For restaurants and coffees I used Yelp’s API with the information of opening hours, price rate, and for attractions and parks, I used Wikipedia’s API to show information about these ancient, cultural locations.",
    "The size of this additional information per location is a bit long, so I used a sidebar to display these data. I used the Google Map’s info window to show the user the street view."],
    "built": "Built with",
    "builthbody": ["Adobe Illustrator", "HTML5", "CSS3", "React", "jQuery", "CORS Anywhere", "Downshift", "Yelp API", "Wikipedia API"]
  },
  {
    "name": "My Reads",
    "descript": "Code + UI Design",
    "thumb": {
      "first": "./assets/myreads_thumb.png",
      "second": "./assets/myreads_thumb@2x.png",
      "third":"./assets/myreads_thumb@3x.png"
    },
    "desktop": {
      "first": "./assets/myread_desktop.png",
      "second": "./assets/myread_desktop@2x.png",
      "third":"./assets/myread_desktop@3x.png"
    },
    "phone": {
      "first": "./assets/myread_phone.png",
      "second": "./assets/myread_phone@2x.png",
      "third":"./assets/myread_phone@3x.png"
    },
    "linkname": "myreads",
    "github": "https://github.com/annaficsor/myreads-react-udacity",
    "site": "https://annaficsor.github.io/myreads-react-udacity/",
    "color": "#FFF1FF",
    "heading": ["Role: UI Designer, Front-End Web Developer", "Client: Udacity Scholarship Project", "Date: June 2018"],
    "project": "Project",
    "projectbody": "Create a bookshelf application that allows the user to select and categorize books that they have read, are currently reading, or want to read. Udacity provided an API server and client library that I used to persist information as I interacted with the application. Udacity provided also a starter code with static HTML for the main and the search page.",
    "tasks": "Tasks",
    "tasksbody": ["Redesign the provided app design",
    "Examine the starter code, use the provided API, and refactor the static HTML",
    "The main page displays a list of shelves, each of which contains a number of books: Currently Reading, Want to Read, Read",
    "Make for each book a control that lets the user select the shelf for that book",
    "Make a link on the main page to the search page",
    "When the user selects a different shelf, the book should move there. The default value for the control should always be the current shelf the book is in",
    "After the user reloads the site, the same information is display on the page",
    "On the search page, the user can find books to add to the library",
    "The search page has a text input that may be used to find books. As the value of the text input changes, the books that match that query are displayed on the page, along with a control that lets the user add the book to their library",
    "When a book is on a bookshelf, it should have the same state on both the main application page and the search page",
    "The search page also has a link to / (the root URL), which leads back to the main page",
    "When the user navigates back to the main page from the search page, they should instantly see all of the selections they made on the search page in their library"],
    "solution": "Solution",
    "solutionbody": ["The provided style wasn’t that bad, so just changed a few little things: fonts, colors, shadows.", "This was my first React app, and it was a very interesting experience with JSX, and components. I tried to write my code as simple as possible."],
    "built": "Built with",
    "builthbody": ["HTML5", "CSS3", "React"]
  },
  {
    "name": "Memory Game",
    "descript": "Code + UI Design",
    "thumb": {
      "first": "./assets/memory_thumb.png",
      "second": "./assets/memory_thumb@2x.png",
      "third":"./assets/memory_thumb@3x.png"
    },
    "desktop": {
      "first": "./assets/memo_desktop.png",
      "second": "./assets/memo_desktop@2x.png",
      "third":"./assets/memo_desktop@3x.png"
    },
    "phone": {
      "first": "./assets/memo_phone.png",
      "second": "./assets/memo_phone@2x.png",
      "third":"./assets/memo_phone@3x.png"
    },
    "linkname": "memory",
    "github": "https://github.com/annaficsor/memory-game",
    "site": "https://annaficsor.github.io/memory-game/",
    "color": "#9999ff",
    "heading": ["Role: UI Designer, Front-End Web Developer", "Client: Udacity Scholarship Project", "Date: March 2018"],
    "project": "Project",
    "projectbody": "Build my own version of the classic memory game ‘concentration’, using JavaScript, DOM selectors and event listeners from scratch.",
    "tasks": "Tasks",
    "tasksbody": ["Make a nice, clean, user-friendly design",
    "Start by building a simple grid of randomly shuffled cards",
    "Figure out the HTML needed to represent a card",
    "Add the functionality to handle clicks",
    "Work on the matching logic. How does the game know if a player guesses correctly or incorrectly?",
    "Work on the winning condition. How does the game “know” if a player has won?",
    "Make a congratulation modal with functionality",
    "Make a restart button",
    "Display a star rating (from 1 to at least 3) that reflects the player's performance",
    "Display a timer",
    "Display the current number of moves a user has made"],
    "solution": "Solution",
    "solutionbody": ["I found a very nice icon collection on iconscout, which basically helped me to figure out the whole design, like colors, shapes, fonts. For this project, I was allowed to use only vanilla Javascript, no fancy libraries, so it was a bit tricky, because previously I had used jQuery for event handling, and that’s much easier than vanilla JS. The matching logic also seemed easy at first, but I had to rethink this again and again. It was fun."],
    "built": "Built with",
    "builthbody": ["HTML5", "CSS3", "Vanilla JavaScript", "Animate CSS"]
  },
  {
    "name": "Arcade Game",
    "descript": "Code",
    "thumb": {
      "first": "./assets/arcade_thumb.png",
      "second": "./assets/arcade_thumb@2x.png",
      "third":"./assets/arcade_thumb@3x.png"
    },
    "desktop": {
      "first": "./assets/arcade_desktop.png",
      "second": "./assets/arcade_desktop@2x.png",
      "third":"./assets/arcade_desktop@3x.png"
    },
    "phone": {
      "first": "./assets/arcade_phone.png",
      "second": "./assets/arcade_phone@2x.png",
      "third":"./assets/arcade_phone@3x.png"
    },
    "linkname": "arcade",
    "github": "https://github.com/annaficsor/arcade-game",
    "site": "https://annaficsor.github.io/arcade-game/",
    "color": "#d7e5ff",
    "heading": ["Role: Front-End Web Developer", "Client: Udacity Scholarship Project", "Date: March 2018"],
    "project": "Project",
    "projectbody": "Udacity provided visual assets and a game loop engine; using these tools I must add a number of entities to the game including the player characters and enemies to recreate the classic arcade game Frogger.",
    "tasks": "Tasks",
    "tasksbody": ["Review the code and comments provided by Udacity",
    "Identify the various classes I will need to write",
    "Identify and code the properties each class must have to accomplish its tasks",
    "Write the functions that provide functionality to each of my class instances",
    "Make sure the functions you write are object-oriented - either class functions (like Player and Enemy) or class prototype functions such as Enemy.prototype.checkCollisions, and that the keyword 'this' is used appropriately within my class and class prototype functions"],
    "solution": "Solution",
    "solutionbody": ["It was a great way to understand object-oriented programming and get familiar with HTML Canvas. I also added a few more functionalities, score table, the option of selecting the player at the beginning, and added gems to the game, so the player could collect these, and refill their lives."],
    "built": "Built with",
    "builthbody": ["HTML5", "CSS3", "Vanilla JavaScript"]
  },
{
    "name": "Logo Designs",
    "descript": "Design",
    "thumb": {
      "first": "./assets/logo_thumb.png",
      "second": "./assets/logo_thumb@2x.png",
      "third":"./assets/logo_thumb@3x.png"
    },
    "desktop": {
      "first": "./assets/wildlife.png",
      "second": "./assets/wildlife@2x.png",
      "third":"./assets/wildlife@3x.png"
    },
    "phone": {
      "first": "./assets/space.png",
      "second": "./assets/space@2x.png",
      "third":"./assets/space@3x.png"
    },
    "linkname": "logos",
    "color": "#FFBC00",
    "color2": "#190023",
    "heading": ["Role: Desiner", "Client: Thirty Logos Challenge", "Date: 2017"],
    "project": "Project",
    "projectbody": "I have made a few logo challenges during my design studies. It was a good way to practice, and implement all of the concepts I have learned about sketching, drawing vector graphics, using Illustrator, and other practices.",
    "tasks": "Wildlife briefing",
    "tasksbody": ["We're a non-profit organization that preserves the life and habitat of wild animals throughout the world. Our organization is known for our passion and personal investment in the lives of animals. Similar to the the WWF logo, we would be happy to use one animal to represent our brand or several, it's up to you. We do require a stand-alone icon for the logo that can be paired with text, although text is not required for this stage. Outside of an animal icon logo, we do not have any requirements at this time."],
    "solution": "Space briefing",
    "solutionbody": ["Space is building co-working offices so that freelancers and small startup companies have a stunning office to work out of without paying the big bucks to buy or lease a large building.", "We offer rentable offices for teams of 1 to 12 in beautiful areas across the world including Austin, New York City, Raleigh, Chicago, San Francisco, and London. These offices are also great for people working remote for larger companies. For the Space logo, we want to capture the idea of a personal, modern, and fun shared office space. We would be open to some kind of icon or using the text Space to represent the company. We don't have any requirements in terms of colors, text, icon, or otherwise. Have fun with some ideas! And if this helps, some of our competitors are Industrious and WeWork."],
    "built": "Built with",
    "builthbody": ["Pen and Paper", "Adobe Illustrator"]
  },
{
    "name": "Optics Site",
    "descript": "UI Design",
    "thumb": {
      "first": "./assets/optics_thumb.png",
      "second": "./assets/optics_thumb@2x.png",
      "third":"./assets/optics_thumb@3x.png"
    },
    "desktop": {
      "first": "./assets/optics.png",
      "second": "./assets/optics@2x.png",
      "third":"./assets/optics@3x.png"
    },
    "linkname": "optics",
    "color": "#FF786F",
    "color2": "#1B092E",
    "heading": ["Role: Designer", "Client: Redesign of an existing optics site", "Date: 2017"],
    "project": "Project",
    "projectbody": "One of my friends has an optics store, and earlier, when I started learning web design, she mentioned that she would like to redesign her website, so I started to work on this project, just for fun. In the meantime, she has hired someone for this job, so I haven’t offered my version, but anyway, I finished the main site design. I tried to make a connection with the theme (eyesight), so I used rounded shapes and transparent elements. I tried to make a simple, clean, user-friendly design.",
    "built": "Built with",
    "builthbody": ["Pen and Paper", "Adobe Illustrator", "Adobe Photoshop"]
  }
]
